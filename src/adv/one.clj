(ns adv.one
  (:require [clojure.string :as str]
            [adv.utils :as u]))

;; Part 1

(def examples-pt1
  "A map of example input and their answers for part 1"
  {"1122" 3
   "1111" 4
   "1234" 0
   "91212129" 9})

(defn parse
  "Parses a string of digits and appends the first digit to the end.
  This simulates a circular list"
  [input]
  (mapv #(Character/digit % 10) input))

(defn fake-circular
  [coll]
  (conj coll (first coll)))


(defn all-pairs
  [coll]
  (partition 2 1 coll))

(defn match?
  "If the pair matches return the digit otherwise return nil"
  [pair]
  (when (= (first pair) (second pair))
    (first pair)))

(def matches
  "A transducer that gives us only the numbers of the matched paris"
  (comp
   (map match?)
   (filter (complement nil?))))

(defn sum-matches
  "Sums the numbers of the matched pairs"
  [coll]
  (transduce matches + 0 coll))

(defn sum-input
  "Parses the input and then sums the numbers of the matched pairs"
  [input]
  (->> input
      (parse)
      (fake-circular)
      (all-pairs)
      (sum-matches)))

;; Test the test inputs
(u/test-examples sum-input examples-pt1)
;; => true

;; Now for the actual input
(def input
  "My input for this challenge"


(sum-input input)
;; => 1223

;;; Part 2

(def examples-pt2
  "A map of example input and their answers for part 1"
  {"1212" 6
   "1221" 0
   "123425" 4
   "123123" 12
   "12131415" 4})

(defn circular-get
  "Performs a get by index, but when n is larger than "
  [coll n]
  (get coll (mod n (count coll))))

(defn all-halfway-pairs
  "Creates a seq of pairs of each number and the number halfway around the coll.

  E.g: [1 2 3 4] => [(1 3) (2 4) (3 1) (4 2)]"
  [coll]
  (let [len (count coll)
        rot (/ len 2)] ;; The problem says we'll only get even length inputs so this is fine
    (loop [acc []
           idx 0]
      (if (= len idx)
        acc
        (recur (conj acc [(get coll idx)
                          (circular-get coll (+ idx rot))])
               (inc idx))))))

(defn sum-halfway-inputs
  "Parses the input and then sums the numbers of the matched pairs"
  [input]
  (->> input
       (parse)
       (all-halfway-pairs)
       (sum-matches)))

;; Test the test inputs
(u/test-examples sum-halfway-inputs examples-pt2)
;; => true

;; Now for the actual input
(sum-halfway-inputs input)
;; => 1284
